package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.revature.dto.AddOrUpdateClientDTO;
import com.revature.model.Client;
import com.revature.util.JDBCUtility;



public class ClientDAO {

	public Client insertClient(AddOrUpdateClientDTO Client) throws SQLException {

		try (Connection con = JDBCUtility.getConnection()) {

			String sql = "INSERT INTO \r\n"
					+ "	Client (First_Name, Last_Name, "
					+ "Address, Phone_Number)\r\n"
					+ "VALUES\r\n"
					+ "(?, ?, ?, ?);";
			PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			ps.setString(1, Client.getFirst_Name());
			ps.setString(2, Client.getLast_Name());
			ps.setString(3, Client.getAddress());
			ps.setString(4, Client.getPhone_Number());
			
			ps.execute();
			
			ResultSet rs = ps.getGeneratedKeys();
			
			rs.next();		
			int autoGeneratedKey = rs.getInt(1);
			return new Client(autoGeneratedKey, Client.getFirst_Name(), Client.getLast_Name(),
			Client.getAddress(),Client.getPhone_Number());
		}

		
	}

	public List<Client> selectAllClient() throws SQLException {

		List<Client> listOfClients = new ArrayList<>();

		try (Connection con = JDBCUtility.getConnection()) {

			String sql = "SELECT * FROM Client";
			PreparedStatement ps = con.prepareStatement(sql);

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {

				listOfClient.add(new Client(rs.getInt("Client_id"), rs.getString("Client_First_Name"),
						rs.getString("Client_Last_Name"), rs.getString("Address"),
						rs.getString("phone_number")));

//				int id = rs.getInt("client_id");
//				String firstName = rs.getString("client_first_name");
//				String lastName = rs.getString("client_last_name");
//				
//				Clients clients = new Clients(id, firstName, lastName);
//				
//				listOfClients.add(clients);
			}
			
		}
		return listOfClient;

	}

	public Client selectClientsById(int id) throws SQLException {

		try (Connection con = JDBCUtility.getConnection()) {

			String sql = "SELECT * FROM clients WHERE client_id = ?";
			PreparedStatement ps = con.prepareStatement(sql);

			ps.setInt(1, id);

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {
				return new Client(rs.getInt("Client_id"), rs.getString("Client_First_Name"),
						rs.getString("Client_Last_Name"), rs.getString("Address"),
						rs.getString("Phone_Number"));
			} else {
				return null;
			}
		}
	}

	public Clients updateClientsById(int id, AddOrUpdateClientDTO clients) throws SQLException {

	

		try (Connection con = JDBCUtility.getConnection()) {

			String sql = "UPDATE Clients\r\n"
					+ "SET Client_First_Name = ?, Client_Last_Name = ?, Address = ?, Phone_Number = ?\r\n"
					+ "WHERE\r\n"
					+ "Client_id = ?;";
			PreparedStatement ps = con.prepareStatement(sql);
			
			ps.setString(1, Client.getFirst_Name());
			ps.setString(2, Client.getLast_Name());
			ps.setString(3, Client.getAddress());
			ps.setString(4, Client.getPhone_Number());

			int i = ps.executeUpdate();

			if (i != 1) {
				throw new SQLException("Unable to update a client with a client id of "+ id);		
			} 

		}
		return new Client(Client_id, Client.getFirst_Name(), Client.getLast_Name(), Client.getSAddress(), 
				 Client.getPhone_Number());
	}

	public boolean deleteClientsById(int id) throws SQLException {
		
		boolean success = false;

		try (Connection con = JDBCUtility.getConnection()) {

			String sql = "DELETE FROM clients WHERE client_id = ?;";
			PreparedStatement ps = con.prepareStatement(sql);

			ps.setInt(1, id);

			int i = ps.executeUpdate();

			if (i != 1) {
				throw new SQLException("Delete unsuccessful! CLient does not exist");
			}
			success = true;
		}
		return success;
	}
	
}